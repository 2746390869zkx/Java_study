//二分查找模板

//
while ( l < r ) {
  int mid = (l + r) >> 1;
  if (mid 的情况) {
      r = mid;
  } else{
      l = mid + 1;
  }
}

while ( l < r ) {
  int mid = (l + r + 1) >> 1;
  if (mid 的情况) {
      r = mid;
  } else{
      l = mid - 1;
  }
}


bool check(int x) {/* ... */} // 检查x是否满足某种性质

// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：
int bsearch_1(int l, int r)
{
    while (l < r)
    {
        int mid = l + r >> 1;
        if (check(mid)) r = mid;    // check()判断mid是否满足性质
        else l = mid + 1;
    }
    return l;
}
// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：
int bsearch_2(int l, int r)
{
    while (l < r)
    {
        int mid = l + r + 1 >> 1;
        if (check(mid)) l = mid;
        else r = mid - 1;
    }
    return l;
}


//浮点数二分
#include<iostream>

using namespace std;

const double MIN = 1e-8;

double check(double num) {
    return num * num * num;
}

int main() {
    double num;
    cin >> num;
    double l = -100 ,r = 100;
    while (r - l >= MIN) {
        double m = (l + r) / 2;
        if (check(m) >= num) r = m;
        else l = m;
    }
    printf("%.6lf\n",l);
    
    return 0;
}
