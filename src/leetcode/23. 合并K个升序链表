class Solution {
    
    public ListNode mergeKLists(ListNode[] lists) {
        return merge(lists,0,lists.length - 1);
    }
    ListNode merge(ListNode[] lists,int l,int r) {
        if (l == r) return lists[l];
        if (l > r) return null;
        int m = (l + r) >> 1;
        return mergeTwoList(merge(lists, l, m), merge(lists, m + 1, r));
    }
    ListNode mergeTwoList(ListNode a,ListNode b) {
        if (a == null || b == null) return a != null ? a : b;
        ListNode head = new ListNode(0);
        ListNode tail = head,pa = a,pb = b;
        while (pa != null && pb != null) {
            if (pa.val <= pb.val) {
                tail.next = pa;
                pa = pa.next;
            } else {
                tail.next = pb;
                pb = pb.next;
            }
            tail = tail.next;
        }
        tail.next = (pa == null) ? pb : pa;
        return head.next;
    }

}
