class Solution {
    int[] e,he,ne,d;
    int idx;
    int N;//总课程
    int n;//边数
    List<Integer> list;
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        N = numCourses;
        n = prerequisites.length;
        e = new int[n + 10];
        ne = new int[n + 10];
        he = new int[N + 10];
        d = new int[N + 10];//记入入度数
        Arrays.fill(he,-1);
        for (int[] arr : prerequisites) {
            int a = arr[1],b = arr[0];
            add(a,b);//使用邻接表保存
            d[b] ++;//入度加一
        }
        boolean f =  topu_sort();
        if (!f) return new int[0];
        int len = list.size();
        int[] res = new int[len];
        int cnt = 0;
        for (int num : list) res[cnt ++] = num;
        return res;
    }
    boolean topu_sort() {
        LinkedList<Integer> q = new LinkedList<>();
        list = new ArrayList<>();
        //如果入度为0，则加入队列。
        for (int i = 0 ; i < N ; i ++) if (d[i] == 0) q.add(i);
        while (!q.isEmpty()) {
            int i = q.poll();
            for (int j = he[i]; j != - 1 ; j = ne[j]) {
                int t = e[j];
                d[t] --;
                if (d[t] == 0) q.add(t);
            }
            list.add(i);
        }
        return list.size() == N;//如果list的数不等课程数，说明有环。
    }
    void add(int a,int b) {
        e[idx] = b;
        ne[idx] = he[a];
        he[a] = idx;
        idx ++;
    }
}
