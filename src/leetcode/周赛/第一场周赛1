//第313周赛

//第一题  https://leetcode.cn/problems/number-of-common-factors/

//求两个数的公因子个数
class Solution {
    public int commonFactors(int a, int b) {
        int res = 0 ;
        for (int i = 1 ; i <= Math.min(a,b) ; i ++) if (a % i == 0 && b % i == 0) res++;
        return res;
    }
    
}

// 第二题  6193. 沙漏的最大总和
class Solution {
    public int maxSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        long[][] dp = new long[n + 1][m + 1];
        for (int i = 1 ; i <= n;i ++) dp[i][1] = dp[i - 1][1] + grid[i - 1][0];
        for (int j = 1 ; j <= m ; j ++) dp[1][j] = dp[1][j - 1] + grid[0][j - 1];
        long max = 0l;
        
        for (int i = 2 ; i <= n ; i ++) {
           for (int j = 2 ; j <= m ; j ++) {
               dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + grid[i - 1][j - 1] - dp[i - 1][j - 1];
               
               if (j >= 3 && i >= 3) {
                   max = Math.max(max,dp[i][j]- dp[i - 3][j] - dp[i][j - 3] + dp[i -3][j-3]  - grid[i - 2][j - 1] - grid[i - 2][j - 3]);
               }
           }
        }
        return (int)max;
    }
}


//第三道题  位运算 ＋ 前缀和  6194. 最小 XOR


/**
先求出num2中1的个数count，异或是不相同为1，所以x中的count个1和32-count个0要和num1错开，因为高位影响最大，所以从num1高位开始遍历，

如果num1这个位是1，那就需要x为1，检查1的个数，只要大于0就用，否则就用0

如果num1这个位是0，那就需要x为0，检查0的个数，只要大于0就用，否则就用1 

*/

class Solution {
    public int minimizeXor(int num1, int num2) {
        int one = getOne(num2);
        int zero = 32 - one;
        int x = 0;
        for (int i = 31 ; i >= 0 ; i --) {
            int d = num1 >> i & 1;
            if (d == 0) {
                //
                if (zero > 0) {
                    x = x * 2 + 0;
                    zero --;
                } else {
                    x = x * 2 + 1;
                    one --;
                }
            } else {
                if (one > 0) {
                    x = x * 2 + 1;
                    one --;
                } else {
                    x = x * 2 + 0;
                    zero --;
                }
            }
        }
        return x;
    }
    //求二进制1的个数
    int getOne(int num) {
        int res = 0;
        while (num != 0) {
            //这里是求最后一个的
            num = num - (num & -num);
            res ++;
        } 
        return res;
    }
}
