/**
 * @author zkx
 * 饿汉式，没有用到就加载
 
 类加载时就初始化，浪费内存，不能延迟加载；
基于 classloader 机制避免了多线程的同步问题，线程安全；
没有加锁，调用效率高。
 */
public class SingleHunger_Demo1 {

    //定义一个私有的静态对象，并且直接创建好
    private static SingleHunger_Demo1 instance = new SingleHunger_Demo1();

    //将构造器私有化
    private SingleHunger_Demo1() {

    }
    //对外开放一个得到单例的静态方法
    public static SingleHunger_Demo1 getInstance() {
        return instance;
    }

}

/**
 * @author zkx
 这种写法，是线程不安全的，但是可以做到延迟加载。
 * 懒汉式单例模式，在用到才加载，
 */
public class SingletonDemoInLazy {
    
    /*私有 + static*/
    private static SingletonDemoInLazy instance ;
    /*私有构造器*/
    private SingletonDemoInLazy() {
        
    }
    /* 提供一个对外的的得到单例的方法 */
    public static SingletonDemoInLazy getInstance() {
        
        //如果还没有创建，便创建后返回
        if (instance == null) {
            instance = new SingletonDemoInLazy();
        }
        return instance;
    }
}
